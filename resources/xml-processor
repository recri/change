#!/usr/bin/tclsh

# trim the data output to make us lean and fast
set ::omit {
    comment
    name image character hexagram pinyin constituting-ruler governing-ruler
    above above-interpretation below below-interpretation
}

# translate an xml format document into a json list
# taken from http://wiki.tcl.tk/3919 by Richard Suchenwirth

proc xml2list xml {
    regsub -all {>\s*<} [string trim $xml " \n\t<>"] "\} \{" xml
    set xml [string map {> "\} \{#text \{" < "\}\} \{"}  $xml]
	
    set res ""   ;# string to collect the result   
    set stack {} ;# track open tags
    set rest {}
    
    foreach item "{$xml}" {
	switch -regexp -- $item {
	    ^# {
		append res "{[lrange $item 0 end]} " ; #text item
	    }
	    ^/ {
		regexp {/(.+)} $item -> tagname ;# end tag
		set expected [lindex $stack end]
		if {$tagname!=$expected} {error "$item != $expected"}
		set stack [lrange $stack 0 end-1]
		append res "\}\} "
	    }
	    /$ { # singleton - start and end in one <> group
		regexp {([^ ]+)( (.+))?/$} $item -> tagname - rest
		set rest [lrange [string map {= " "} $rest] 0 end]
		append res "{$tagname [list $rest] {}} "
	    }
	    ^!-- { # comment
	    }
	    default {
		set tagname [lindex $item 0] ;# start tag
		set rest [lrange [string map {= " "} $item] 1 end]
		lappend stack $tagname
		append res "\{$tagname [list $rest] \{"
	    }
	}
	if {[llength $rest]%2} {error "att's not paired: $rest"}
    }
    if [llength $stack] {error "unresolved: $stack"}
    string map {"\} \}" "\}\}"} [lindex $res 0]
}
proc read-file {file} {
    set fp [open $file r]
    set data [read $fp]
    close $fp
    set data
}
proc get-text {doc} {
    set text {}
    foreach item $doc {
	foreach {tag attrs body} $item {
	    switch -glob $tag {
		?text {
		    set lines $attrs
		    set lines [regsub -all "\n" $lines " "]
		    set lines [regsub -all "  +" $lines " "]
		    set lines [regsub -all \" $lines {\\"}]
		    append text " [string trim $lines]"
		    continue
		}
		br {
		    set text [string trim $text]\n
		    continue
		}
		* {
		    error "$tag in get-text"
		}
	    }
	}
    }
    return [string trim $text]
}
proc get-text-and-tags {doc tags} {
    set text {}
    array set content {}
    foreach item $doc {
	foreach {tag attrs body} $item {
	    switch -glob $tag {
		?text {
		    set lines $attrs
		    set lines [regsub -all "\n" $lines " "]
		    set lines [regsub -all "  +" $lines " "]
		    set lines [regsub -all \" $lines {\\"}]
		    append text " [string trim $lines]"
		    continue
		}
		br {
		    set text [string trim $text]\n
		    continue
		}
		* {
		    if {$tag in $tags} {
			set content($tag) [get-text $body]
			continue
		    }
		    error "$tag in get-text-and-tags $tags"
		}
	    }
	}
    }
    set result [list [string trim $text]]
    lappend result {*}[array get content]
    return $result
}

proc get-line {n gov con doc} {
    return [list line-$n {*}[get-text-and-tags $doc {comment}] governing-ruler $gov constituting-ruler $con]
}

proc traverse {indent doc} {
    foreach {tag attrs body} $doc { 
	switch $tag {
	    changes {
		set changes {}
		foreach item $body { lappend changes [traverse "  $indent" $item] }
		return $changes
	    }
	    change {
		set change {}
		foreach item $body { lappend change {*}[traverse "  $indent" $item] }
		return $change
	    }
	    number -
	    character -
	    comment -
	    lines -
	    hexagram -
	    pinyin -
	    name-interpretation -
	    line-1 - line-2 - line-3 - line-4 - line-5 - line-6 - line-7 {
		# there is a #text body with the hexagram number
		# there is a #text body with the character in utf-8
		# there is a #text body, this is the comment on the change
		# there is one #text in the body with the lines [6789]+
		# there is one #text in the body with the unicode hexagram in utf-8
		# there is one #text item with the pinyin transliteration
		return [list $tag [get-text $body]]
	    }
	    name -
	    above -
	    below {
		# there is a #text body with and optionally a comment and/or interpretation
		return [list $tag {*}[get-text-and-tags $body {comment interpretation}]]
	    }
	    image -
	    judgment {
		# there is a body with #text and br and possibly a comment
		return [list $tag {*}[get-text-and-tags $body {comment}]]
	    }
	    line {
		# there is an n=? attribute,
		# optionally a governing_ruler=? attribute
		# optionally a constituting_ruler=? attribute
		# there is a body with #text and br and possibly a comment
		set myattrs(governing_ruler) false
		set myattrs(constituting_ruler) false
		array set myattrs $attrs
		return [get-line $myattrs(n) $myattrs(governing_ruler) $myattrs(constituting_ruler) $body]
	    }
	    default {
		error "unexpected: $indent$tag $attrs"
		foreach item $body {
		    traverse "  $indent" $item
		}
	    }
	}
    }
}

proc keep-tag {tag} { return [expr {$tag ni $::omit}] }
proc keep-comments {} { return [keep-tag {comment}] }
proc is-comment {tag} { return [expr {[string first comment $tag] >= 0}] }

# option one: filter xml file into javascript source for web app
proc single-line {string} {
    if {[regexp \n $string]} {
	return [regsub -all \n $string "\\n"]
    }
    return $string
}

proc process--to-js {myfile changes} {
    set nchanges [traverse {} $changes]
    set index 0
    set lmap {}
    
    puts "export class ChangesText {"
    puts "static get name() { return \"[string range [file root $myfile] 5 end]\" }"
    puts "static get edition() { return \"$myfile\" }"
    puts "static get version() { return \"[clock format [clock seconds] -format %Y-%m-%d-%H-%M-%S]\" }"
    puts "static get changes() { return \["
    foreach c $nchanges {
	# puts --------\n$c\n--------
	set pname {}
	set nname {}
	set lname {}
	puts "  {"
	foreach {name value} $c {
	    switch -glob $name {
		{interpretation} {
		    if {$pname in {name above below}} {
			# keep lookaside table of interpretations
			if {[keep-tag $pname-$name]} {
			    puts "    \"$pname-interpretation\" : \"$value\","
			}
		    } else {
			error "unexpected predecessor of interpretation $pname"
		    }
		}
		{judgment} - {image} {
		    if {[keep-tag $name]} {
			if {[llength $value] == 3 && [lindex $value 1] == "comment"} {
			    set nname $name-comment
			    set nvalue [lindex $value 2]
			    set value [lindex $value 0]
			    puts "    \"$name\" : \"[single-line $value]\","
			    if {[keep-comments]} {
				puts "    \"$nname\" : \"[single-line $nvalue]\","
			    }
			} else {
			    puts "    \"$name\" : \"[single-line $value]\","
			}
		    }
		}
		{line-?} {
		    if {[keep-tag $name]} {
			set lname $name
			puts "    \"$name\" : \"[single-line $value]\","
		    }
		}
		{constituting-ruler} {
		    if {[keep-tag $name]} {
			if {$value eq "true"} {
			    puts "    \"$lname-$name\" : \"$value\","
			}
		    }
		}
		{governing-ruler} {
		    if {[keep-tag $name]} {
			if {$value eq "true"} {
			    puts "    \"$lname-$name\" : \"$value\","
			}
		    }
		}
		{comment} {
		    if {[keep-comments]} {
			if {$pname ni {interpretation {}}} {
			    puts "    \"$pname-$name\" : \"[single-line $value]\","
			} else {
			    puts "    \"$name\" : \"[single-line $value]\","
			}
		    }
		}
		
		{lines} {
		    lappend lmap "\"$value\":\"$index\""
		    incr index 
		}
		* {
		    if {[is-comment $name]} {
			if {[keep-comments]} {
			    puts "    \"$name\" : \"[single-line $value]\","
			}
		    } else {
			if {[keep-tag $name]} {
			    puts "    \"$name\" : \"[single-line $value]\","
			}
		    }
		}
	    }
	    set pname $name
	    set pvalue $value
	}
	puts "  },"
    }
    puts "]"
    puts "}"
    puts "}"
}

# option two - process xml to the set of reduced xml used by web app
proc process--to-xml {myfile changes} {
    set nchanges [traverse {} $changes]
    set index 0
    set lmap {}
    
    puts <changes>
    foreach c $nchanges {
	set pname {}
	set nname {}
	set lname {}
	puts "  <change>"
	foreach {name value} $c {
	    switch -glob $name {
		{interpretation} {
		    if {$pname in {name above below}} {
			# keep lookaside table of interpretations
			if {[keep-tag $pname-$name]} {
			    puts "    <$pname-interpretation>$value</$pname-interpretation>"
			}
		    } else {
			error "unexpected predecessor of interpretation $pname"
		    }
		}
		{judgment} - {image} {
		    if {[keep-tag $name]} {
			if {[llength $value] == 3 && [lindex $value 1] == "comment"} {
			    set nname $name-comment
			    set nvalue [lindex $value 2]
			    set value [lindex $value 0]
			    puts "    <$name>$value</$name>"
			    if {[keep-comments]} { puts "    <$nname>$nvalue</$nname>" }
			} else {
			    puts "    <$name>$value</$name>"
			}
		    }
		}
		{line-?} {
		    if {[keep-tag $name]} {
			set lname $name
			puts "    <$name>$value</$name>"
		    }
		}
		{constituting-ruler} -
		{governing-ruler} {
		    if {[keep-tag $name] && $value eq "true"} {
			puts "    <$lname-$name>$value</$lname-$name>"
		    }
		}
		{comment} {
		    if {[keep-comments]} {
			if {$pname ni {interpretation {}}} {
			    puts "    <$pname-$name>$value</$pname-$name>"
			} else {
			    puts "    <$name>$value</$name>"
			}
		    }
		}
		
		{lines} {
		    puts "    <lines>$value</lines>"
		    lappend lmap "\"$value\":\"$index\""
		    incr index 
		}
		* {
		    if {[is-comment $name]} {
			if {[keep-comments]} {
			    puts "    <$name>$value</$name>"
			}
		    } else {
			if {[keep-tag $name]} {
			    puts "    <$name>$value</$name>"
			}
		    }
		}
	    }
	    set pname $name
	    set pvalue $value
	}
	puts "  </change>"
    }
    puts "</changes>"
}

# option 3 - process xml to the reduced xml expressed as text and blank lines
proc process--to-txt {myfile changes} {
    set nchanges [traverse {} $changes]
    set index 0
    set lmap {}
    
    # puts <changes>
    puts ""
    foreach c $nchanges {
	set pname {}
	set nname {}
	set lname {}
	# puts "  <change>"
	puts ""
	foreach {name value} $c {
	    switch -glob $name {
		{interpretation} {
		    if {$pname in {name above below}} {
			# keep lookaside table of interpretations
			if {[keep-tag $pname-$name]} {
			    puts "\n$value"
			}
		    } else {
			error "unexpected predecessor of interpretation $pname"
		    }
		}
		{judgment} - {image} {
		    if {[keep-tag $name]} {
			if {[llength $value] == 3 && [lindex $value 1] == "comment"} {
			    set nname $name-comment
			    set nvalue [lindex $value 2]
			    set value [lindex $value 0]
			    puts "\n$value"
			    if {[keep-comments]} { puts "\n$nvalue" }
			} else {
			    puts "\n$value"
			}
		    }
		}
		{line-?} {
		    if {[keep-tag $name]} {
			set lname $name
			puts "\n$value"
		    }
		}
		{constituting-ruler} -
		{governing-ruler} {
		    if {[keep-tag $name] && $value eq "true"} {
			puts "\n$value"
		    }
		}
		{comment} {
		    if {[keep-comments]} {
			puts "\n$value"
		    }
		}
		
		{lines} {
		    puts "\n$value"
		    lappend lmap "\"$value\":\"$index\""
		    incr index 
		}
		* {
		    if {[is-comment $name]} {
			if {[keep-comments]} {
			    puts "\n$value"
			}
		    } else {
			if {[keep-tag $name]} {
			    puts "\n$value"
			}
		    }
		}
	    }
	    set pname $name
	    set pvalue $value
	}
	# puts "  </change>"
	puts ""
    }
    # puts "</changes>"
    puts ""
}

## option four, reverse option 3, parse text back into xml
proc line-capitalize {line} {
    return "[string toupper [string index $line 0]][string range $line 1 end]"
}
array set typos {
    { graduallythe } { gradually the }
    { isto } { is to }
    { Jugendtorheit } { youthful folly }
    {encouragingin } {encouraging in }
    {magicyour} {magic your}
    {ofmouth} {of mouth}
    {roadfrom} {road from}
    {durationcharacter} {duration character}
    {theYou} {the You}
    {seecompanion} {see companion}
    {yourlike} {your like}
    {on the Anger} {in the meadow}
    {A flock of dragons without a head appears. Salvation! A flock of dragons without a head appears. Salvation!}
    {A flock of dragons without a head appears. Salvation!}
}

proc line-typo {line} {
    foreach name [array names ::typos] {
	if {[regexp $name $line]} {
	    set line [regsub $name $line $::typos($name)]
	}
    }
    return $line
}
	    
proc process-text-line {i reading} {
    # the first line should end with {means:}
    # add the : if missing and move any additional words
    # to the beginning of the next line
    # if a line begins with a , move it to the end of the
    # previous line
    set reading [lmap l $reading {line-typo $l}]
    switch $i {
	0 - 1 {
	    # the number
	    # the name
	}
	2 {
	    # the judgment
	    for {set i 0} {$i < [llength $reading]} {incr i} {
		set line [lindex $reading $i]
		if {[regexp {^[a-z]} $line]} {
		    set line [line-capitalize $line]
		    set reading [lreplace $reading $i $i $line]
		}
	    }
	}
	3 - 4 - 5 - 6 - 7 - 8 {
	    # at the beginning
	    # in the 2nd, 3rd, 4th, or 5th place
	    # at the top
	    set first [lindex $reading 0]
	    set ifirst $first
	    if {[regexp { means } $first]} {
		set first [regsub means $first {means:}]
		set reading [lreplace $reading 0 0 $first]
	    }
	    if {[regexp { means$} $first]} {
		append first {:}
		set reading [lreplace $reading 0 0 $first]
	    }
	    if {[regexp {means:(.+)$} $first all tail]} {
		set first [regsub $tail\$ $first {}]
		set reading [lreplace $reading 0 0 $first]
		set reading [lreplace $reading 1 1 [string trim "$tail [lindex $reading 1]"]]
	    }
	    if { ! [regexp { means:$} $first]} {
		error "failed to fix line $i fix: $first\nfrom: $ifirst"
	    }
	    if {[regexp {^Initially,} $first]} {
		set first [regsub , $first {}]
		set reading [lreplace $reading 0 0 $first]
	    }
	    if {[regexp { Nine} $first]} {
		set first [regsub Nine $first nine]
		set reading [lreplace $reading 0 0 $first]
	    }
	    if {[regexp { Six} $first]} {
		set first [regsub Six $first six]
		set reading [lreplace $reading 0 0 $first]
	    }
	    
	    for {set i 0} {$i < [llength $reading]} {incr i} {
		set line [lindex $reading $i]
		if {[regexp {^[a-z]} $line]} {
		    set line [line-capitalize $line]
		    set reading [lreplace $reading $i $i $line]
		}
	    }

	}
	9 {
	    # when all lines are
	}
	default {
	    error "unexpected change index $i: $reading"
	}
    }
    for {set j 1} {$j < [llength $reading]} {incr j} {
	if {[regexp {^, } [lindex $reading $j]]} {
	    set jp [expr {$j-1}]
	    set reading [lreplace $reading $jp $jp [lindex $reading $jp],]
	    set reading [lreplace $reading $j $j [string range [lindex $reading $j] 2 end]]
	}
    }
    return $reading
}
    
proc process--from-txt {myfile data} {
    set match {}
    array set change {}
    foreach line [split $data \n] {
	set line [string trim $line]
	if {[regexp {^\d\d?$} $line match]} {
	    set change($match) [list $match]
	} elseif {$match ne {}} {
	    lappend change($match) $line
	}
    }
    # puts "parsed [lsort -integer [array names change]]"
    # check that all 64 are present
    if {[array size change] != 64} {
	error "wrong number of entries found: [array size change]\n[lsort [array names change]]"
    }
    for {set i 1} {$i <= 64} {incr i} {
	# puts "$i -> [lmap l $change($i) {expr {[string length $l] > 0}}]"
	set j 0
	set ej {}
	set entry($i) {}
	foreach l $change($i) {
	    if {$l eq {}} {
		if {$ej ne {}} { lappend entry($i) [join [process-text-line $j $ej] <br/>\n] }
		incr j
		set ej {}
	    } else {
		lappend ej $l
	    }
	}
	# puts "$i -> [lmap e $entry($i) {string length $e}]"
	# puts "$i -> [llength $entry($i)]"
    }
    puts "<changes>"
    for {set i 1} {$i <= 64} {incr i} {
	puts "  <change>"
	puts "    <number>$i</number>"
	puts "    <name-interpretation>[lindex $entry($i) 1]</name-interpretation>"
	puts "    <judgment>[lindex $entry($i) 2]</judgment>"
	puts "    <line-1>[lindex $entry($i) 3]</line-1>"
	puts "    <line-2>[lindex $entry($i) 4]</line-2>"
	puts "    <line-3>[lindex $entry($i) 5]</line-3>"
	puts "    <line-4>[lindex $entry($i) 6]</line-4>"
	puts "    <line-5>[lindex $entry($i) 7]</line-5>"
	puts "    <line-6>[lindex $entry($i) 8]</line-6>"
	if {[llength $entry($i)] == 10} {
	    puts "    <line-7>[lindex $entry($i) 9]</line-7>"
	}
	puts "  </change>"
    }
    puts "</changes>"
}

##
## main line
##
set myopt --to-js;		# default operation
set myproc process--to-js

foreach arg $argv {
    switch -- $arg {
	--to-js -
	--to-xml -
	--to-txt -
	--from-txt { set myproc process$arg }
	default { 
	    set myfile $arg
	    set mydata [read-file $myfile]
	    switch -- $myproc {
		process--to-js {
		    # output option one, generate the javascript for the web app
		    $myproc $myfile [xml2list [string trim $mydata]]
		}
		process--to-xml {
		    # output option two, generate the xml for the subset of data
		    # that the web app uses, thought google could translate this
		    # but it made a mess of it.
		    $myproc $myfile [xml2list [string trim $mydata]]
		}
		process--to-txt {
		    # output option three, generate the text for the subset of
		    # data that the web app uses.
		    $myproc $myfile [xml2list [string trim $mydata]]
		}
		process--from-txt {
		    # output option four, reverse the operation of --to-txt
		    # and generate an xml file
		    $myproc $myfile $mydata
		}
	    }
	}
    }
}



