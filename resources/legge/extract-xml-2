#!/usr/bin/tclsh

package require Tcl 8.2
package require struct::tree
package require struct::list
package require htmlparse 1.2.2

set ::file {}

proc read-file {file} {
    set ::file $file
    set fp [open $file r]
    set data [read $fp]
    close $fp
    set data
}

namespace eval ::scraper {

    ## initialize per file counters
    proc init-parse {} {
	set ::ntable 0
	set ::ntr 0
	set ::ntd 0
	set ::maxntr 0
	array unset ::found
	array unset ::data
    }
    
    proc extract-text {tree nodes} {
	# should be a simple list of PCDATA (br PCDATA) nodes
	# but turned out to be more complicated, so took a
	# puts stderr "extract text from $nodes"
	set types [lmap n $nodes { $tree get $n type }]
	set result {}
	foreach n $nodes {
	    switch [$tree get $n type] {
		PCDATA { append result { } [$tree get $n data] }
		br { append result <br/> }
		a -
		abbr -
		span -
		blockquote { append result { } [extract-text $tree [$tree children $n]] }
		default {
		    puts stderr "$::file: extract-text saw [$tree get $n type]"
		    append result { } [extract-text $tree [$tree children $n]]
		}
	    }
	}
	return [list $result]
    }
    proc set-line-data {l t} {
	set ::data(line-$l) $::data($t,3);		# judgment
	set ::data(line-$l-legge) $::data([incr t],3);	# judgment translation
	set ::data(line-$l-image) $::data([incr t],3);	# image
	set ::data(line-$l-image-legge) $::data([incr t],3);	# image translation
    }
	
    proc parse-change {n html} {
        set documentTree [::struct::tree]

	set section {}
	set change {}
	array set targets {}
	
        htmlparse::2tree $html $documentTree

	# puts "raw tree has [llength [$documentTree nodes]] nodes"
        # htmlparse::removeVisualFluff $documentTree
	# puts "tree-fluff has [llength [$documentTree nodes]] nodes"
        # htmlparse::removeFormDefs $documentTree
	# puts "tree-form has [llength [$documentTree nodes]] nodes"
	# this gives me lot's of type
	# puts [$documentTree keys root]
	# this gives me lot's of root
	# puts [$documentTree get root type]

	set root [$documentTree rootname]

	# puts "rootname is {$root}"
	# puts "root keys: {[$documentTree keys $root]}"
	# puts "root getall: {[$documentTree getall $root]}"
	# puts "root previous: {[$documentTree previous $root]} next: {[$documentTree next $root]} numchildren: {[$documentTree numchildren $root]}"
	
	$documentTree walk $root -order both {action node} {
	    set type [$documentTree get $node type]
	    if {$action eq {enter}} {
		switch $type {
		    table {
			incr ::ntable
			set ::ntr 0
			# puts "enter table $::ntable"
		    } 
		}
		if {$::ntable != 4} continue
		switch $type {
		    tr {
			incr ::ntr
			set ::maxntr $::ntr
			set ::ntd 0
			# maximum ntr is 66 for 1, 46 for 2, and 30 for all the rest
		    }
		    td {
			incr ::ntd
		    }
		    br {
		    } 
		    p {
		    } 
		    style {
		    }
		    PCDATA {
			append ::data($::ntr,$::ntd) [$documentTree get $node data]
		    }
		    a {
		    }
		    hr {
		    }
		    span {
		    }
		    div {
		    }
		    default {
			if {$::ntable != 4} continue
			if { ! [info exists ::found($type)]} { set ::found($type) 0 }
			incr ::found($type)
		    }
		}
	    }
	    if {$action eq {leave}} {
		if {$type eq {table}} {
		    # puts "leave table $::ntable"
		    set ::ntr 0
		    set ::ntd 0
		}
	    }
	}
	
	$documentTree destroy
	if {0} {
	    append change "<comment>[string trim [join $target(comment) \n<br/>\n]]</comment>\n"
	    append change "<judgment>[string trim [join $target(urteil) {}]]\n"
	    append change "<comment>[string trim [join $target(urteil-comment) \n<br/>\n]]</comment></judgment>\n"
	    append change "<image>[string trim [join $target(bild) {}]]\n"
	    append change "<comment>[string trim [join $target(bild-comment) \n<br/>\n]]</comment></image>\n"
	    for {set i 1} {$i <= 7} {incr i} {
		if { ! [info exists target(linie$i)]} continue
		append change "<line n=\"$i\">[string trim [join $target(linie$i) {}]]\n"
		append change "<comment>[string trim [join $target(linie$i-comment) \n<br/>\n]]</comment></line>\n"
	    }
	    return <change>\n$change\n</change>
	}
	# puts $::data(1,1) boring, just the row number and some links
	# puts $::data(1,2);	# hexagram and chinese name
	set ::data(hexagram) [string index $::data(1,2) 0]
	set ::data(name) [string range $::data(1,2) 1 end-1]
	set ::data(colon) [string index $::data(1,2) end]
	# puts $::data(name)$::data(colon)
	# puts $::data(1,3);	# looks like $name: $judgment
	set nname [string length $::data(name)]
	set ::data(colon2) [string index $::data(1,3) $nname]
	set ::data(judgment) [string range $::data(1,3) $nname+1 end]
	# if {[info exists ::data(2,1)]} { puts $::data(2,1); };	# no such entry
	# puts $::data(2,2)
	# legge never translates the names of the hexagrams, used an old romanization, 
	# which ctext.org updated to uninflected pinyin, I think
	set ::data(name-legge) [string range $::data(2,2) 0 end-1]
	# puts $::data(2,3)
	set ::data(judgment-legge) $::data(2,3)
	# puts $::data(3,1);	# links
	# puts $::data(3,2);	# source in chinese followed by colon [fix.me]
	# puts $::data(3,3);	# chinese commentary [fix.me]
	set ::data(judgment-tuan) $::data(3,3)
	# if {[info exists ::data(4,1)]} { puts $::data(4,1); };	# no such entry
	# puts $::data(4,2);	# Tuan Zhuan (pinyin for ::data(3,2) [fix.me]
	# puts $::data(4,3);	# Legge translation for ::data(3,3) [fix.me]
	set ::data(judgment-tuan-legge) $::data(4,3)
	# puts $::data(5,1);	# links
	# puts $::data(5,2);	# source in chinese followed by colon [fix.me]
	# puts $::data(5,3);	# chinese commentary, the image [fix.me]
	set ::data(image) $::data(5,3)
	# if {[info exists ::data(6,1)]} { puts $::data(6,1) }; # no such entry
	# puts $::data(6,2);	# Xiang Zhuan (Images) [fix.me]
	# puts $::data(6,3);	# Legge for ::data(5,3) 
	set ::data(image-legge) $::data(6,3)
	# puts $::data(7,1);	# links
	# puts $::data(7,2);	# hexagram name colon, again
	# puts $::data(7,3);	# first line judgment, first three characters location (6|9) :
	set-line-data 1 7
	set-line-data 2 11
	set-line-data 3 15
	set-line-data 4 19
	set-line-data 5 23
	set-line-data 6 27;	# the image translations have some junk in them on this line
	if {[info exists ::data(31,3)]} {
	    set-line-data 7 31
	}
	for {set i 35} {$i <= $::maxntr} {incr i} {
	    #puts "$::data(35,2) $::data(35,3)";	# another commentary in Qian and Kun
	    #puts "$::data(36,2) $::data(36,3)"
	    #puts "$::data(37,2) $::data(37,3)";	# first line
	    #puts "$::data(38,2) $::data(38,3)"
	    #puts "$::data(39,2) $::data(39,3)";	# second line
	    #puts "$::data(40,2) $::data(40,3)"
	    #puts "$::data(41,2) $::data(41,3)";	# third line
	    #puts "$::data(42,2) $::data(42,3)"
	    #puts "$::data(43,2) $::data(43,3)";	# fourth line 
	    #puts "$::data(44,2) $::data(44,3)"
	    #puts "$::data(45,2) $::data(45,3)";	# fifth line
	    #puts "$::data(46,2) $::data(46,3)"
	    #puts "$::data(47,2) $::data(47,3)";	# sixth line, only for Qian
	    #puts "$::data(48,2) $::data(48,3)"
	    for {set j 1} {$j <= 3} {incr j} {
		# if {[info exists ::data($i,$j)]} { puts "$n,$i,$j: $::data($i,$j)" }
	    }
	}
	set change {}
	append change "<number>$n</number>\n"; # must come from file name or be earlier than table 4
	foreach name {hexagram name judgment name-legge judgment-legge judgment-tuan judgment-tuan-legge image image-legge} {
	    append change "  <$name>$::data($name)</$name>\n"
	}
	foreach line {1 2 3 4 5 6 7} {
	    foreach name {line-%d line-%d-legge line-%d-image line-%d-image-legge} {
		set name [format $name $line]
		if {[info exists ::data($name)]} {
		    append change "  <$name>$::data($name)</$name>\n"
		}
	    }
	}
	return <change>\n$change</change>\n
    }
}

set xml {}
foreach f $argv {
    ::scraper::init-parse
    # puts stderr "processing $f"
    set html [read-file $f]
    append xml [::scraper::parse-change [file root $f] $html]
}
puts <changes>\n$xml\n</changes>
